load("@my_rules_dotnet//dotnet:defs.bzl", "declare_toolchains", "dotnet_sdk", "dotnet_tool_binary")

package(default_visibility = ["//visibility:public"])

declare_toolchains(
    host = "{dotnetos}_{dotnetarch}",
    sdk = ":dotnet_sdk",
    builder = ":builder",
)

filegroup(
    name = "dotnet_bin",
    srcs = ["dotnet{exe}"],
)

dotnet_sdk(
    name = "dotnet_sdk",
    all_files = ":all_files",
    dotnet = "dotnet{exe}",
    dotnetarch = "{dotnetarch}",
    dotnetos = "{dotnetos}",
    fxr = ":fxr",
    init_files = ":init_files",
    nuget_build_config = "{nuget_config}",
    packs = [
        {pack_labels},
    ],
    root_file = "ROOT",
    sdk_files = ":sdk_files",
    sdk_root = "sdk/{version}",
    shared = ":shared",
)

dotnet_tool_binary(
    name = "builder",
    srcs = ["@my_rules_dotnet//dotnet/tools/builder:builder_srcs"],
    target_framework = "netcoreapp3.1",
    sdk = ":dotnet_sdk"
)

filegroup(
    name = "all_files",
    srcs = [
        "dotnet{exe}",
        ":fxr",
        ":init_files",
        ":sdk_files",
        {dynamic_targets}
    ],
)

# init files so dotnet doesn't print welcome messages
# included because bazel sandboxes these away
filegroup(
    name = "init_files",
    srcs = glob(
        [".dotnet/**/*"],
        allow_empty = False,
    ),
)

filegroup(
    name = "sdk_files",
    # todo: process this glob better
    # there are miscellaneous parts of the sdk that are unrelated
    # like tests, FSharp, roslyn, resources, etc
    srcs = glob(["sdk/{version}/**/*"]),
)

filegroup(
    name = "fxr",
    srcs = glob(["host/fxr/**/*"]),  # not multi-version safe
)

# not multi-version safe
{dynamics}
