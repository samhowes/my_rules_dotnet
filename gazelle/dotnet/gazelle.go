package dotnet

import (
	"flag"
	"fmt"
	"log"
	"path"
	"strings"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/repo"
	"github.com/bazelbuild/bazel-gazelle/resolve"
	"github.com/bazelbuild/bazel-gazelle/rule"
	bzl "github.com/bazelbuild/buildtools/build"
)

const languageName = "dotnet"

type dotnetLang struct{}

// NewLanguage is called by gazelle to install this language extension in a binary
func NewLanguage() language.Language {
	return &dotnetLang{}
}

// ======== language.Language interface ========
func (d dotnetLang) RegisterFlags(fs *flag.FlagSet, cmd string, c *config.Config) {
	// todo(#84)
}

func (d dotnetLang) CheckFlags(fs *flag.FlagSet, c *config.Config) error {
	// todo(#84)
	return nil
}

func (d dotnetLang) KnownDirectives() []string {
	// todo(#84)
	return []string{}
}

func (d dotnetLang) Configure(c *config.Config, rel string, f *rule.File) {
	// todo(#84)
}

// Name returns the name of the language. This should be a prefix of the
// kinds of rules generated by the language, e.g., "go" for the Go extension
// since it generates "go_library" rules.
func (d dotnetLang) Name() string { return languageName }

// Imports returns a list of ImportSpecs that can be used to import the rule
// r. This is used to populate RuleIndex.
//
// If nil is returned, the rule will not be indexed. If any non-nil slice is
// returned, including an empty slice, the rule will be indexed.
func (d dotnetLang) Imports(c *config.Config, r *rule.Rule, f *rule.File) []resolve.ImportSpec {
	return []resolve.ImportSpec{{
		Lang: languageName,
		Imp:  fmt.Sprintf("//%s:%s", f.Pkg, r.Name()),
	}}
}

func (d dotnetLang) Embeds(r *rule.Rule, from label.Label) []label.Label {
	// todo(#84)
	return []label.Label{}
}

func (d dotnetLang) Resolve(c *config.Config, ix *resolve.RuleIndex, rc *repo.RemoteCache, r *rule.Rule, imports interface{}, from label.Label) {
	// todo(#84)
}

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds. All
// kinds of rules generated for this language may be found here.
func (d dotnetLang) Kinds() map[string]rule.KindInfo {
	return kinds
}

var kinds = map[string]rule.KindInfo{
	"dotnet_library": {
		NonEmptyAttrs: map[string]bool{"srcs": true},
	},
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
func (d dotnetLang) Loads() []rule.LoadInfo {
	return []rule.LoadInfo{{
		Name:    "@my_rules_dotnet//dotnet:defs.bzl",
		Symbols: []string{"dotnet_library", "dotnet_binary"},
	}}
}

type directoryInfo struct {
	extensions map[string]bool
}

var accumulator = struct {
	directories map[string]directoryInfo
}{directories: map[string]directoryInfo{}}

// GenerateRules extracts build metadata from source files in a directory.
// GenerateRules is called in each directory where an update is requested
// in depth-first post-order.
//
// args contains the arguments for GenerateRules. This is passed as a
// struct to avoid breaking implementations in the future when new
// fields are added.
//
// A GenerateResult struct is returned. Optional fields may be added to this
// type in the future.
//
// Any non-fatal errors this function encounters should be logged using
// log.Print.
func (d dotnetLang) GenerateRules(args language.GenerateArgs) language.GenerateResult {
	var rules []*rule.Rule
	var imports []interface{}
	var projectFile string
	info := directoryInfo{extensions: map[string]bool{}}
	for _, f := range append(args.RegularFiles, args.GenFiles...) {
		if strings.HasSuffix(f, "proj") {
			projectFile = f
			// one project file per directory
			continue
		}

		switch strings.ToLower(path.Base(f)) {
		case "launchsettings.json":
			continue
		}

		info.extensions[path.Ext(f)] = true
	}

	if projectFile == "" {
		// must be subdirectory of a project
		accumulator.directories[args.Rel] = info
		return language.GenerateResult{}
	}

	project, err := Load(projectFile)
	if err != nil {
		log.Printf("%s: failed to parse project file. Skipping. This may result in incomplete build definitions. Parsing error: %v", projectFile, err)
		return language.GenerateResult{}
	}

	baseName := path.Base(projectFile)
	ext := path.Ext(baseName)
	name := baseName[0 : len(baseName)-len(ext)]

	var kind string
	if project.Executable {
		kind = "dotnet_binary"
	} else {
		kind = "dotnet_library"
	}

	r := rule.NewRule(kind, name)

	project.CollectFiles(info, "")

	var data []string
	for _, d := range args.Subdirs {
		// https://docs.microsoft.com/en-us/dotnet/core/project-sdk/overview#default-includes-and-excludes
		// https://github.com/dotnet/AspNetCore.Docs/blob/main/aspnetcore/host-and-deploy/visual-studio-publish-profiles.md#compute-project-items
		switch d {
		case "wwwroot":
			data = append(data, "wwwroot/**")
			continue
		case "bin":
			continue
		case "obj":
			continue
		}

		rel := path.Join(args.Rel, d)
		dInfo := accumulator.directories[rel]
		project.CollectFiles(dInfo, fmt.Sprintf("%s/", d))
	}

	for key, value := range project.Files {
		r.SetAttr(key, makeGlob(value, []string{}))
	}

	r.SetAttr("target_framework", project.TargetFramework)
	if project.Sdk != "" {
		r.SetAttr("sdk", project.Sdk)
	}
	if len(data) > 0 {
		r.SetAttr("data", makeGlob(data, []string{}))
	}

	rules = append(rules, r)
	imports = append(imports, "interface{}")

	return language.GenerateResult{
		Gen:     rules,
		Imports: imports,
	}
}

// makeGlob returns a `glob([], exclude=[])` expression
// the default ExprFromValue produces a `glob([], "excludes": [])` expression
func makeGlob(include, exclude []string) bzl.Expr {
	patternsValue := rule.ExprFromValue(include)
	globArgs := []bzl.Expr{patternsValue}
	if len(exclude) > 0 {
		excludesValue := rule.ExprFromValue(exclude)
		globArgs = append(globArgs, &bzl.AssignExpr{
			LHS: &bzl.Ident{Name: "exclude"},
			Op:  "=",
			RHS: excludesValue,
		})
	}
	return &bzl.CallExpr{
		X:    &bzl.LiteralExpr{Token: "glob"},
		List: globArgs,
	}
}

func (d dotnetLang) Fix(c *config.Config, f *rule.File) {
	// todo(#84)
}
